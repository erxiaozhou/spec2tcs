{
    "exec_data": {
        "ctgy": "Control",
        "raw_title": ":math:`\\IF~\\blocktype~\\instr_1^\\ast~\\ELSE~\\instr_2^\\ast~\\END`",
        "name": "if",
        "steps_part": "1. Assert: due to :ref:`validation <valid-blocktype>`, :math:`\\expand_F(\\blocktype)` is defined.\n2. Let :math:`[t_1^m] \\to [t_2^n]` be the :ref:`function type <syntax-functype>` :math:`\\expand_F(\\blocktype)`.\n3. Let :math:`L` be the label whose arity is :math:`n` and whose continuation is the end of the |IF| instruction.\n4. Assert: due to :ref:`validation <valid-if>`, a value of :ref:`value type <syntax-valtype>` |I32| is on the top of the stack.\n5. Pop the value :math:`\\I32.\\CONST~c` from the stack.\n6. Assert: due to :ref:`validation <valid-if>`, there are at least :math:`m` values on the top of the stack.\n7. Pop the values :math:`\\val^m` from the stack.\n8. If :math:`c` is non-zero, then:\n   a. :ref:`Enter <exec-instr-seq-enter>` the block :math:`\\val^m~\\instr_1^\\ast` with label :math:`L`.\n9. Else:\n   a. :ref:`Enter <exec-instr-seq-enter>` the block :math:`\\val^m~\\instr_2^\\ast` with label :math:`L`.",
        "steps": [
            "ASSERT    : [IsDefinedCondition(['is_defined_condition', FormulaValue(Type(any::), \\expand_F(\\blocktype), 1)])]",
            "LET       : [(ValRefValue(Type(any::), [t_1^m] \\to [t_2^n], 1), FormulaValue(Type(other:function type:), \\expand_F(\\blocktype), 1))]",
            "LET       : [(ValRefValue(Type(any::), L, 1), Label(Type(other:label:), whose arity is :math:`n` and whose continuation is the end of the |IF| instruction, 1, ))]",
            "ASSERT    : [StackCondition(['stack_top', True, StackValue(Type(i32::), any, 1)])]",
            "POP       : [ValRefValue(Type(i32::), c, 1)]",
            "ASSERT    : [StackCondition(['thereb_stack_top', True, Value(Type(any::), any, at least :math:`m`)])]",
            "POP       : [ValRefValue(Type(any::), \\val, m)]",
            "IF        : [[NonZeroCondition(['non_zero_condition', ValRefValue(Type(any::), c, 1)])]]",
            "  ENTER     : [BlockValue(block, \\val^m~\\instr_1^\\ast, 1)]",
            "ELSE      : []",
            "  ENTER     : [BlockValue(block, \\val^m~\\instr_2^\\ast, 1)]"
        ],
        "vstack_vt_num_seq": "[[(Type(i32::), 1), -1], [(Type(any::), 'm'), -1]]"
    },
    "valid_data": {
        "raw_title": ":math:`\\IF~\\blocktype~\\instr_1^\\ast~\\ELSE~\\instr_2^\\ast~\\END`",
        "name": "if",
        "ctgy": "Control",
        "steps": [
            "MUST_BE   : [blocktypeTypeCond(['blocktype_type_condition', ValRefValue(Type(any::), blocktype, 1), ValRefValue(Type(any::), t_1^\\ast, 1), ValRefValue(Type(any::), t_2^\\ast, 1)])]",
            "LET       : [(ValRefValue(Type(any::), C', 1), ValRefValue(Type(other:context:), C, 1))]",
            "MUST_TY   : [seqValidTypeCond(['seq_valid_type', '\\\\instr_1^\\\\ast', 't_1^\\\\ast', 't_2^\\\\ast'])]",
            "MUST_TY   : [seqValidTypeCond(['seq_valid_type', '\\\\instr_2^\\\\ast', 't_1^\\\\ast', 't_2^\\\\ast'])]",
            "MUST_TY   : [directValidTypeCond(['inst_ty_direct_cond', [StackValue(Type(any::t_1^\\ast), any, 1), StackValue(Type(i32::), any, 1)], [StackValue(Type(any::t_2^\\ast), any, 1)]])]"
        ]
    },
    "imms": {
        "\\blocktype": "<\\blocktype: blocktype>",
        "\\instr_1^\\ast": "<\\instr_1^\\ast: instr *>",
        "\\ELSE": "<\\ELSE: instr *>"
    },
    "exec_title_paras": {},
    "binary_info": [
        "<04: hex>",
        "<bt: blocktype>",
        "<in_1: instr *>",
        "<05: hex>",
        "<in_2: instr *>",
        "<0B: hex>"
    ]
}