{
    "exec_data": {
        "ctgy": "Table",
        "raw_title": ":math:`\\TABLESIZE~x`",
        "name": "table.size",
        "steps_part": "1. Let :math:`F` be the :ref:`current <exec-notation-textual>` :ref:`frame <syntax-frame>`.\n2. Assert: due to :ref:`validation <valid-table.size>`, :math:`F.\\AMODULE.\\MITABLES[x]` exists.\n3. Let :math:`a` be the :ref:`table address <syntax-tableaddr>` :math:`F.\\AMODULE.\\MITABLES[x]`.\n4. Assert: due to :ref:`validation <valid-table.size>`, :math:`S.\\STABLES[a]` exists.\n5. Let :math:`\\X{tab}` be the :ref:`table instance <syntax-tableinst>` :math:`S.\\STABLES[a]`.\n6. Let :math:`\\X{sz}` be the length of :math:`\\X{tab}.\\TIELEM`.\n7. Push the value :math:`\\I32.\\CONST~\\X{sz}` to the stack.",
        "steps": [
            "LET       : [(ValRefValue(Type(any::), F, 1), FrameInstance(Type(other:frame:), current frame, 1))]",
            "ASSERT    : [ExistCondition(['exist', TableAddrInstance(F.\\AMODULE.\\MITABLES[x]:Type(any::):ValRefValue(Type(u32::), x, 1)::math:`F.\\AMODULE.\\MITABLES[x]`)])]",
            "LET       : [(ValRefValue(Type(any::), a, 1), TableAddrInstance(F.\\AMODULE.\\MITABLES[x]:Type(other:table address:):ValRefValue(Type(u32::), x, 1):the :ref:`table address <syntax-tableaddr>` :math:`F.\\AMODULE.\\MITABLES[x]`))]",
            "ASSERT    : [ExistCondition(['exist', TableInstance(S.\\STABLES[a]:Type(any::):ValRefValue(Type(u32::), a, 1)::math:`S.\\STABLES[a]`)])]",
            "LET       : [(ValRefValue(Type(any::), \\X{tab}, 1), TableInstance(S.\\STABLES[a]:Type(other:table instance:):ValRefValue(Type(u32::), a, 1):the :ref:`table instance <syntax-tableinst>` :math:`S.\\STABLES[a]`))]",
            "LET       : [(ValRefValue(Type(any::), \\X{sz}, 1), LengthRefValue(the length of :math:`\\X{tab}.\\TIELEM`:Type(u32::):\\X{tab}:\\TIELEM:the length of :math:`\\X{tab}.\\TIELEM`))]",
            "PUSH      : [ValRefValue(Type(i32::), \\X{sz}, 1)]"
        ],
        "vstack_vt_num_seq": "[[(Type(i32::), 1), 1]]"
    },
    "valid_data": {
        "raw_title": ":math:`\\TABLESIZE~x`",
        "name": "table.size",
        "ctgy": "Table",
        "steps": [
            "MUST_EXIST: [ExistCondition(['valid_define_condition', TableAddrInstance(C.\\CTABLES[x]:Type(any::):ValRefValue(Type(u32::), x, 1)::math:`C.\\CTABLES[x]`)])]",
            "MUST_TY   : [directValidTypeCond(['inst_ty_direct_cond', [], [StackValue(Type(i32::), any, 1)]])]"
        ]
    },
    "imms": {
        "x": "<x: tableidx>"
    },
    "exec_title_paras": {},
    "binary_info": [
        "<FC: hex>",
        "<16: u32>",
        "<x: tableidx>"
    ]
}