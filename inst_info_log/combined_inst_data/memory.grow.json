{
    "exec_data": {
        "ctgy": "Memory",
        "raw_title": ":math:`\\MEMORYGROW`",
        "name": "memory.grow",
        "steps_part": "1. Let :math:`F` be the :ref:`current <exec-notation-textual>` :ref:`frame <syntax-frame>`.\n2. Assert: due to :ref:`validation <valid-memory.grow>`, :math:`F.\\AMODULE.\\MIMEMS[0]` exists.\n3. Let :math:`a` be the :ref:`memory address <syntax-memaddr>` :math:`F.\\AMODULE.\\MIMEMS[0]`.\n4. Assert: due to :ref:`validation <valid-memory.grow>`, :math:`S.\\SMEMS[a]` exists.\n5. Let :math:`\\X{mem}` be the :ref:`memory instance <syntax-meminst>` :math:`S.\\SMEMS[a]`.\n6. Let :math:`\\X{sz}` be the length of :math:`S.\\SMEMS[a]` divided by the :ref:`page size <page-size>`.\n7. Assert: due to :ref:`validation <valid-memory.grow>`, a value of :ref:`value type <syntax-valtype>` |I32| is on the top of the stack.\n8. Pop the value :math:`\\I32.\\CONST~n` from the stack.\n9. Let :math:`\\X{err}` be the |i32| value :math:`2^{32}-1`, for which :math:`\\signed_{32}(\\X{err})` is :math:`-1`.\n10. Either, try :ref:`growing <grow-mem>` :math:`\\X{mem}` by :math:`n` :ref:`pages <page-size>`:\n   a. If it succeeds, push the value :math:`\\I32.\\CONST~\\X{sz}` to the stack.\n   b. Else, push the value :math:`\\I32.\\CONST~\\X{err}` to the stack.\n11. Or, push the value :math:`\\I32.\\CONST~\\X{err}` to the stack.",
        "steps": [
            "LET       : [(ValRefValue(Type(any::), F, 1), FrameInstance(Type(other:frame:), current frame, 1))]",
            "ASSERT    : [ExistCondition(['exist', MemAddrInstance(F.\\AMODULE.\\MIMEMS[0]:Type(any::):constantValue(0:Type(u32::):0:False:0)::math:`F.\\AMODULE.\\MIMEMS[0]`)])]",
            "LET       : [(ValRefValue(Type(any::), a, 1), MemAddrInstance(F.\\AMODULE.\\MIMEMS[0]:Type(other:memory address:):constantValue(0:Type(u32::):0:False:0):the :ref:`memory address <syntax-memaddr>` :math:`F.\\AMODULE.\\MIMEMS[0]`))]",
            "ASSERT    : [ExistCondition(['exist', MemInstance(S.\\SMEMS[a]:Type(any::):ValRefValue(Type(u32::), a, 1)::math:`S.\\SMEMS[a]`)])]",
            "LET       : [(ValRefValue(Type(any::), \\X{mem}, 1), MemInstance(S.\\SMEMS[a]:Type(other:memory instance:):ValRefValue(Type(u32::), a, 1):the :ref:`memory instance <syntax-meminst>` :math:`S.\\SMEMS[a]`))]",
            "LET       : [(ValRefValue(Type(any::), \\X{sz}, 1), FormulaValue(Type(i32:length:), the length of :math:`S.\\SMEMS[a]` divided by the :ref:`page size <page-size>`, 1))]",
            "ASSERT    : [StackCondition(['stack_top', True, StackValue(Type(i32::), any, 1)])]",
            "POP       : [ValRefValue(Type(i32::), n, 1)]",
            "LET       : [(ValRefValue(Type(any::), \\X{err}, 1), FormulaValue(Type(i32::), 2^{32}-1, 1))]",
            "EITHER    : [:ref:`growing <grow-mem>` :math:`\\X{mem}` by :math:`n` :ref:`pages <page-size>`]",
            "  IF        : [[MachineDeterminedCondition(['machine_determined'])]]",
            "    PUSH      : [ValRefValue(Type(i32::), \\X{sz}, 1)]",
            "  ELSE      : []",
            "    PUSH      : [ValRefValue(Type(i32::), \\X{err}, 1)]",
            "PUSH      : [ValRefValue(Type(i32::), \\X{err}, 1)]"
        ],
        "vstack_vt_num_seq": "[[(Type(i32::), 1), -1], [(Type(i32::), 1), 1]]"
    },
    "valid_data": {
        "raw_title": ":math:`\\MEMORYGROW`",
        "name": "memory.grow",
        "ctgy": "Memory",
        "steps": [
            "MUST_EXIST: [ExistCondition(['valid_define_condition', MemAddrInstance(C.\\CMEMS[0]:Type(any::):constantValue(0:Type(u32::):0:False:0)::math:`C.\\CMEMS[0]`)])]",
            "MUST_TY   : [directValidTypeCond(['inst_ty_direct_cond', [StackValue(Type(i32::), any, 1)], [StackValue(Type(i32::), any, 1)]])]"
        ]
    },
    "imms": {},
    "exec_title_paras": {},
    "binary_info": [
        "<40: hex>",
        "<00: hex>"
    ]
}