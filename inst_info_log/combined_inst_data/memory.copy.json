{
    "exec_data": {
        "ctgy": "Memory",
        "raw_title": ":math:`\\MEMORYCOPY`",
        "name": "memory.copy",
        "steps_part": "1. Let :math:`F` be the :ref:`current <exec-notation-textual>` :ref:`frame <syntax-frame>`.\n2. Assert: due to :ref:`validation <valid-memory.copy>`, :math:`F.\\AMODULE.\\MIMEMS[0]` exists.\n3. Let :math:`\\X{ma}` be the :ref:`memory address <syntax-memaddr>` :math:`F.\\AMODULE.\\MIMEMS[0]`.\n4. Assert: due to :ref:`validation <valid-memory.copy>`, :math:`S.\\SMEMS[\\X{ma}]` exists.\n5. Let :math:`\\X{mem}` be the :ref:`memory instance <syntax-meminst>` :math:`S.\\SMEMS[\\X{ma}]`.\n6. Assert: due to :ref:`validation <valid-memory.copy>`, a value of :ref:`value type <syntax-valtype>` |I32| is on the top of the stack.\n7. Pop the value :math:`\\I32.\\CONST~n` from the stack.\n8. Assert: due to :ref:`validation <valid-memory.copy>`, a value of :ref:`value type <syntax-valtype>` |I32| is on the top of the stack.\n9. Pop the value :math:`\\I32.\\CONST~s` from the stack.\n10. Assert: due to :ref:`validation <valid-memory.copy>`, a value of :ref:`value type <syntax-valtype>` |I32| is on the top of the stack.\n11. Pop the value :math:`\\I32.\\CONST~d` from the stack.\n12. If :math:`s + n` is larger than the length of :math:`\\X{mem}.\\MIDATA` or :math:`d + n` is larger than the length of :math:`\\X{mem}.\\MIDATA`, then:\n    a. Trap.\n13. If :math:`n = 0`, then:\n   a. Return.\n14. If :math:`d \\leq s`, then:\n   a. Push the value :math:`\\I32.\\CONST~d` to the stack.\n   b. Push the value :math:`\\I32.\\CONST~s` to the stack.\n   c. Execute the instruction :math:`\\I32\\K{.}\\LOAD\\K{8\\_u}~\\{ \\OFFSET~0, \\ALIGN~0 \\}`.\n   d. Execute the instruction :math:`\\I32\\K{.}\\STORE\\K{8}~\\{ \\OFFSET~0, \\ALIGN~0 \\}`.\n   e. Assert: due to the earlier check against the memory size, :math:`d+1 < 2^{32}`.\n   f. Push the value :math:`\\I32.\\CONST~(d+1)` to the stack.\n   g. Assert: due to the earlier check against the memory size, :math:`s+1 < 2^{32}`.\n   h. Push the value :math:`\\I32.\\CONST~(s+1)` to the stack.\n15. Else:\n   a. Assert: due to the earlier check against the memory size, :math:`d+n-1 < 2^{32}`.\n   b. Push the value :math:`\\I32.\\CONST~(d+n-1)` to the stack.\n   c. Assert: due to the earlier check against the memory size, :math:`s+n-1 < 2^{32}`.\n   d. Push the value :math:`\\I32.\\CONST~(s+n-1)` to the stack.\n   e. Execute the instruction :math:`\\I32\\K{.}\\LOAD\\K{8\\_u}~\\{ \\OFFSET~0, \\ALIGN~0 \\}`.\n   f. Execute the instruction :math:`\\I32\\K{.}\\STORE\\K{8}~\\{ \\OFFSET~0, \\ALIGN~0 \\}`.\n   g. Push the value :math:`\\I32.\\CONST~d` to the stack.\n   h. Push the value :math:`\\I32.\\CONST~s` to the stack.\n16. Push the value :math:`\\I32.\\CONST~(n-1)` to the stack.\n17. Execute the instruction :math:`\\MEMORYCOPY`.",
        "steps": [
            "LET       : [(ValRefValue(Type(any::), F, 1), FrameInstance(Type(other:frame:), current frame, 1))]",
            "ASSERT    : [ExistCondition(['exist', MemAddrInstance(F.\\AMODULE.\\MIMEMS[0]:Type(any::):constantValue(0:Type(u32::):0:False:0)::math:`F.\\AMODULE.\\MIMEMS[0]`)])]",
            "LET       : [(ValRefValue(Type(any::), \\X{ma}, 1), MemAddrInstance(F.\\AMODULE.\\MIMEMS[0]:Type(other:memory address:):constantValue(0:Type(u32::):0:False:0):the :ref:`memory address <syntax-memaddr>` :math:`F.\\AMODULE.\\MIMEMS[0]`))]",
            "ASSERT    : [ExistCondition(['exist', MemInstance(S.\\SMEMS[\\X{ma}]:Type(any::):ValRefValue(Type(u32::), \\X{ma}, 1)::math:`S.\\SMEMS[\\X{ma}]`)])]",
            "LET       : [(ValRefValue(Type(any::), \\X{mem}, 1), MemInstance(S.\\SMEMS[\\X{ma}]:Type(other:memory instance:):ValRefValue(Type(u32::), \\X{ma}, 1):the :ref:`memory instance <syntax-meminst>` :math:`S.\\SMEMS[\\X{ma}]`))]",
            "ASSERT    : [StackCondition(['stack_top', True, StackValue(Type(i32::), any, 1)])]",
            "POP       : [ValRefValue(Type(i32::), n, 1)]",
            "ASSERT    : [StackCondition(['stack_top', True, StackValue(Type(i32::), any, 1)])]",
            "POP       : [ValRefValue(Type(i32::), s, 1)]",
            "ASSERT    : [StackCondition(['stack_top', True, StackValue(Type(i32::), any, 1)])]",
            "POP       : [ValRefValue(Type(i32::), d, 1)]",
            "IF        : [[CompareCondition(['compare_condition', FormulaValue(Type(any::), s + n, 1), True, 'larger', LengthRefValue(the length of :math:`\\X{mem}.\\MIDATA`:Type(u32::):\\X{mem}:\\MIDATA:the length of :math:`\\X{mem}.\\MIDATA`)]), CompareCondition(['compare_condition', FormulaValue(Type(any::), d + n, 1), True, 'larger', LengthRefValue(the length of :math:`\\X{mem}.\\MIDATA`:Type(u32::):\\X{mem}:\\MIDATA:the length of :math:`\\X{mem}.\\MIDATA`)])]]",
            "  TRAP      : []",
            "IF        : [[FormulaCondition(['formula_condition', FormulaValue(Type(any::), n = 0, 1)])]]",
            "  RETURN    : []",
            "IF        : [[FormulaCondition(['formula_condition', FormulaValue(Type(any::), d \\leq s, 1)])]]",
            "  PUSH      : [ValRefValue(Type(i32::), d, 1)]",
            "  PUSH      : [ValRefValue(Type(i32::), s, 1)]",
            "  EXECUTE   : [FormulaValue(Type(any::), \\I32\\K{.}\\LOAD\\K{8\\_u}~\\{ \\OFFSET~0, \\ALIGN~0 \\}, 1)]",
            "  EXECUTE   : [FormulaValue(Type(any::), \\I32\\K{.}\\STORE\\K{8}~\\{ \\OFFSET~0, \\ALIGN~0 \\}, 1)]",
            "  ASSERT    : [FormulaCondition(['formula_condition', FormulaValue(Type(any::), d+1 < 2^{32}, 1)])]",
            "  PUSH      : [FormulaValue(Type(i32::), d+1, 1)]",
            "  ASSERT    : [FormulaCondition(['formula_condition', FormulaValue(Type(any::), s+1 < 2^{32}, 1)])]",
            "  PUSH      : [FormulaValue(Type(i32::), s+1, 1)]",
            "ELSE      : []",
            "  ASSERT    : [FormulaCondition(['formula_condition', FormulaValue(Type(any::), d+n-1 < 2^{32}, 1)])]",
            "  PUSH      : [FormulaValue(Type(i32::), d+n-1, 1)]",
            "  ASSERT    : [FormulaCondition(['formula_condition', FormulaValue(Type(any::), s+n-1 < 2^{32}, 1)])]",
            "  PUSH      : [FormulaValue(Type(i32::), s+n-1, 1)]",
            "  EXECUTE   : [FormulaValue(Type(any::), \\I32\\K{.}\\LOAD\\K{8\\_u}~\\{ \\OFFSET~0, \\ALIGN~0 \\}, 1)]",
            "  EXECUTE   : [FormulaValue(Type(any::), \\I32\\K{.}\\STORE\\K{8}~\\{ \\OFFSET~0, \\ALIGN~0 \\}, 1)]",
            "  PUSH      : [ValRefValue(Type(i32::), d, 1)]",
            "  PUSH      : [ValRefValue(Type(i32::), s, 1)]",
            "PUSH      : [FormulaValue(Type(i32::), n-1, 1)]",
            "EXECUTE   : [ValRefValue(Type(any::), \\MEMORYCOPY, 1)]"
        ],
        "vstack_vt_num_seq": "[[(Type(i32::), 1), -1], [(Type(i32::), 1), -1], [(Type(i32::), 1), -1]]"
    },
    "valid_data": {
        "raw_title": ":math:`\\MEMORYCOPY`",
        "name": "memory.copy",
        "ctgy": "Memory",
        "steps": [
            "MUST_EXIST: [ExistCondition(['valid_define_condition', MemAddrInstance(C.\\CMEMS[0]:Type(any::):constantValue(0:Type(u32::):0:False:0)::math:`C.\\CMEMS[0]`)])]",
            "MUST_TY   : [directValidTypeCond(['inst_ty_direct_cond', [StackValue(Type(i32::), any, 1), StackValue(Type(i32::), any, 1), StackValue(Type(i32::), any, 1)], []])]"
        ]
    },
    "imms": {},
    "exec_title_paras": {},
    "binary_info": [
        "<FC: hex>",
        "<10: u32>",
        "<00: hex>",
        "<00: hex>"
    ]
}