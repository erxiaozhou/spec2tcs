{
    "exec_data": {
        "ctgy": "Table",
        "raw_title": ":math:`\\TABLEGROW~x`",
        "name": "table.grow",
        "steps_part": "1. Let :math:`F` be the :ref:`current <exec-notation-textual>` :ref:`frame <syntax-frame>`.\n2. Assert: due to :ref:`validation <valid-table.grow>`, :math:`F.\\AMODULE.\\MITABLES[x]` exists.\n3. Let :math:`a` be the :ref:`table address <syntax-tableaddr>` :math:`F.\\AMODULE.\\MITABLES[x]`.\n4. Assert: due to :ref:`validation <valid-table.grow>`, :math:`S.\\STABLES[a]` exists.\n5. Let :math:`\\X{tab}` be the :ref:`table instance <syntax-tableinst>` :math:`S.\\STABLES[a]`.\n6. Let :math:`\\X{sz}` be the length of :math:`S.\\STABLES[a]`.\n7. Assert: due to :ref:`validation <valid-table.grow>`, a value of :ref:`value type <syntax-valtype>` |I32| is on the top of the stack.\n8. Pop the value :math:`\\I32.\\CONST~n` from the stack.\n9. Assert: due to :ref:`validation <valid-table.fill>`, a :ref:`reference value <syntax-ref>` is on the top of the stack.\n10. Pop the value :math:`\\val` from the stack.\n11. Either, try :ref:`growing <grow-table>` :math:`\\X{table}` by :math:`n` entries with initialization value :math:`\\val`:\n   a. If it succeeds, push the value :math:`\\I32.\\CONST~\\X{sz}` to the stack.\n   b. Else, push the value :math:`\\I32.\\CONST~(-1)` to the stack.\n12. Or, push the value :math:`\\I32.\\CONST~(-1)` to the stack.",
        "steps": [
            "LET       : [(ValRefValue(Type(any::), F, 1), FrameInstance(Type(other:frame:), current frame, 1))]",
            "ASSERT    : [ExistCondition(['exist', TableAddrInstance(F.\\AMODULE.\\MITABLES[x]:Type(any::):ValRefValue(Type(u32::), x, 1)::math:`F.\\AMODULE.\\MITABLES[x]`)])]",
            "LET       : [(ValRefValue(Type(any::), a, 1), TableAddrInstance(F.\\AMODULE.\\MITABLES[x]:Type(other:table address:):ValRefValue(Type(u32::), x, 1):the :ref:`table address <syntax-tableaddr>` :math:`F.\\AMODULE.\\MITABLES[x]`))]",
            "ASSERT    : [ExistCondition(['exist', TableInstance(S.\\STABLES[a]:Type(any::):ValRefValue(Type(u32::), a, 1)::math:`S.\\STABLES[a]`)])]",
            "LET       : [(ValRefValue(Type(any::), \\X{tab}, 1), TableInstance(S.\\STABLES[a]:Type(other:table instance:):ValRefValue(Type(u32::), a, 1):the :ref:`table instance <syntax-tableinst>` :math:`S.\\STABLES[a]`))]",
            "LET       : [(ValRefValue(Type(any::), \\X{sz}, 1), LengthRefValue(the length of :math:`S.\\STABLES[a]`:Type(u32::):S:\\STABLES[a]:the length of :math:`S.\\STABLES[a]`))]",
            "ASSERT    : [StackCondition(['stack_top', True, StackValue(Type(i32::), any, 1)])]",
            "POP       : [ValRefValue(Type(i32::), n, 1)]",
            "ASSERT    : [StackCondition(['ref_stack_top', True, StackValue(Type(other:reference value:), any, 1)])]",
            "POP       : [ValRefValue(Type(any::), \\val, 1)]",
            "EITHER    : [:ref:`growing <grow-table>` :math:`\\X{table}` by :math:`n` entries with initialization value :math:`\\val`]",
            "  IF        : [[MachineDeterminedCondition(['machine_determined'])]]",
            "    PUSH      : [ValRefValue(Type(i32::), \\X{sz}, 1)]",
            "  ELSE      : []",
            "    PUSH      : [FormulaValue(Type(i32::), -1, 1)]",
            "PUSH      : [FormulaValue(Type(i32::), -1, 1)]"
        ],
        "vstack_vt_num_seq": "[[(Type(i32::), 1), -1], [(Type(any::), 1), -1], [(Type(i32::), 1), 1]]"
    },
    "valid_data": {
        "raw_title": ":math:`\\TABLEGROW~x`",
        "name": "table.grow",
        "ctgy": "Table",
        "steps": [
            "MUST_EXIST: [ExistCondition(['valid_define_condition', TableAddrInstance(C.\\CTABLES[x]:Type(any::):ValRefValue(Type(u32::), x, 1)::math:`C.\\CTABLES[x]`)])]",
            "LET       : [(ValRefValue(Type(any::), \\limits~t, 1), TableAddrInstance(C.\\CTABLES[x]:Type(other:table type:):ValRefValue(Type(u32::), x, 1):the :ref:`table type <syntax-tabletype>` :math:`C.\\CTABLES[x]`))]",
            "MUST_TY   : [directValidTypeCond(['inst_ty_direct_cond', [StackValue(Type(any::t), any, 1), StackValue(Type(i32::), any, 1)], [StackValue(Type(i32::), any, 1)]])]"
        ]
    },
    "imms": {
        "x": "<x: tableidx>"
    },
    "exec_title_paras": {},
    "binary_info": [
        "<FC: hex>",
        "<15: u32>",
        "<x: tableidx>"
    ]
}