{
    "exec_data": {
        "ctgy": "Vector",
        "raw_title": ":math:`t\\K{x}N\\K{.}\\vrelop`",
        "name": "txN.vrelop",
        "steps_part": "1. Assert: due to :ref:`validation <valid-vrelop>`, two values of :ref:`value type <syntax-valtype>` |V128| are on the top of the stack.\n2. Pop the value :math:`\\V128.\\VCONST~c_2` from the stack.\n3. Pop the value :math:`\\V128.\\VCONST~c_1` from the stack.\n4. Let :math:`i^\\ast` be the sequence :math:`\\lanes_{t\\K{x}N}(c_1)`.\n5. Let :math:`j^\\ast` be the sequence :math:`\\lanes_{t\\K{x}N}(c_2)`.\n6. Let :math:`c` be the result of computing :math:`\\lanes^{-1}_{t\\K{x}N}(\\extends_{1,|t|}(\\vrelop_t(i^\\ast, j^\\ast)))`.\n7. Push the value :math:`\\V128.\\VCONST~c` to the stack.",
        "steps": [
            "ASSERT    : [StackCondition(['stack_top', True, StackValue(Type(v128::), any, 2)])]",
            "POP       : [ValRefValue(Type(v128::), c_2, 1)]",
            "POP       : [ValRefValue(Type(v128::), c_1, 1)]",
            "LET       : [(ValRefValue(Type(any::), i^\\ast, 1), FormulaValue(Type(other:byte_seq:), \\lanes_{t\\K{x}N}(c_1), 1))]",
            "LET       : [(ValRefValue(Type(any::), j^\\ast, 1), FormulaValue(Type(other:byte_seq:), \\lanes_{t\\K{x}N}(c_2), 1))]",
            "LET       : [(ValRefValue(Type(any::), c, 1), FormulaValue(Type(other:byte_seq:), \\lanes^{-1}_{t\\K{x}N}(\\extends_{1,|t|}(\\vrelop_t(i^\\ast, j^\\ast))), 1))]",
            "PUSH      : [ValRefValue(Type(v128::), c, 1)]"
        ],
        "vstack_vt_num_seq": "[[(Type(v128::), 1), -1], [(Type(v128::), 1), -1], [(Type(v128::), 1), 1]]"
    },
    "valid_data": {
        "raw_title": ":math:`\\shape\\K{.}\\vrelop`",
        "name": "shape.vrelop",
        "ctgy": "Vector",
        "steps": [
            "MUST_TY   : [directValidTypeCond(['inst_ty_direct_cond', [StackValue(Type(v128::), any, 1), StackValue(Type(v128::), any, 1)], [StackValue(Type(v128::), any, 1)]])]"
        ]
    },
    "imms": {},
    "exec_title_paras": {
        "vrelop": "le",
        "t": "i32",
        "N": "4"
    },
    "binary_info": [
        "<FD: hex>",
        "<62: u32>"
    ]
}