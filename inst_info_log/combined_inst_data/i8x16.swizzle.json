{
    "exec_data": {
        "ctgy": "Vector",
        "raw_title": ":math:`\\K{i8x16.}\\SWIZZLE`",
        "name": "i8x16.swizzle",
        "steps_part": "1. Assert: due to :ref:`validation <valid-vbinop>`, two values of :ref:`value type <syntax-valtype>` |V128| are on the top of the stack.\n2. Pop the value :math:`\\V128.\\VCONST~c_2` from the stack.\n3. Let :math:`i^\\ast` be the sequence :math:`\\lanes_{i8x16}(c_2)`.\n4. Pop the value :math:`\\V128.\\VCONST~c_1` from the stack.\n5. Let :math:`j^\\ast` be the sequence :math:`\\lanes_{i8x16}(c_1)`.\n6. Let :math:`c^\\ast` be the concatenation of the two sequences :math:`j^\\ast~0^{240}`\n7. Let :math:`c'` be the result of :math:`\\lanes^{-1}_{i8x16}(c^\\ast[ i^\\ast[0] ] \\dots c^\\ast[ i^\\ast[15] ])`.\n8. Push the value :math:`\\V128.\\VCONST~c'` onto the stack.",
        "steps": [
            "ASSERT    : [StackCondition(['stack_top', True, StackValue(Type(v128::), any, 2)])]",
            "POP       : [ValRefValue(Type(v128::), c_2, 1)]",
            "LET       : [(ValRefValue(Type(any::), i^\\ast, 1), FormulaValue(Type(other:byte_seq:), \\lanes_{i8x16}(c_2), 1))]",
            "POP       : [ValRefValue(Type(v128::), c_1, 1)]",
            "LET       : [(ValRefValue(Type(any::), j^\\ast, 1), FormulaValue(Type(other:byte_seq:), \\lanes_{i8x16}(c_1), 1))]",
            "LET       : [(ValRefValue(Type(any::), c^\\ast, 1), FormulaValue(Type(other:byte_seq:), the concatenation of the two sequences :math:`j^\\ast~0^{240}`, 1))]",
            "LET       : [(ValRefValue(Type(any::), c', 1), FormulaValue(Type(other:byte_seq:), \\lanes^{-1}_{i8x16}(c^\\ast[ i^\\ast[0] ] \\dots c^\\ast[ i^\\ast[15] ]), 1))]",
            "PUSH      : [ValRefValue(Type(v128::), c', 1)]"
        ],
        "vstack_vt_num_seq": "[[(Type(v128::), 1), -1], [(Type(v128::), 1), -1], [(Type(v128::), 1), 1]]"
    },
    "valid_data": {
        "raw_title": ":math:`\\K{i8x16.}\\SWIZZLE`",
        "name": "i8x16.swizzle",
        "ctgy": "Vector",
        "steps": [
            "MUST_TY   : [directValidTypeCond(['inst_ty_direct_cond', [StackValue(Type(v128::), any, 1), StackValue(Type(v128::), any, 1)], [StackValue(Type(v128::), any, 1)]])]"
        ]
    },
    "imms": {},
    "exec_title_paras": {},
    "binary_info": [
        "<FD: hex>",
        "<14: u32>"
    ]
}