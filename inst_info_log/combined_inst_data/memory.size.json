{
    "exec_data": {
        "ctgy": "Memory",
        "raw_title": ":math:`\\MEMORYSIZE`",
        "name": "memory.size",
        "steps_part": "1. Let :math:`F` be the :ref:`current <exec-notation-textual>` :ref:`frame <syntax-frame>`.\n2. Assert: due to :ref:`validation <valid-memory.size>`, :math:`F.\\AMODULE.\\MIMEMS[0]` exists.\n3. Let :math:`a` be the :ref:`memory address <syntax-memaddr>` :math:`F.\\AMODULE.\\MIMEMS[0]`.\n4. Assert: due to :ref:`validation <valid-memory.size>`, :math:`S.\\SMEMS[a]` exists.\n5. Let :math:`\\X{mem}` be the :ref:`memory instance <syntax-meminst>` :math:`S.\\SMEMS[a]`.\n6. Let :math:`\\X{sz}` be the length of :math:`\\X{mem}.\\MIDATA` divided by the :ref:`page size <page-size>`.\n7. Push the value :math:`\\I32.\\CONST~\\X{sz}` to the stack.",
        "steps": [
            "LET       : [(ValRefValue(Type(any::), F, 1), FrameInstance(Type(other:frame:), current frame, 1))]",
            "ASSERT    : [ExistCondition(['exist', MemAddrInstance(F.\\AMODULE.\\MIMEMS[0]:Type(any::):constantValue(0:Type(u32::):0:False:0)::math:`F.\\AMODULE.\\MIMEMS[0]`)])]",
            "LET       : [(ValRefValue(Type(any::), a, 1), MemAddrInstance(F.\\AMODULE.\\MIMEMS[0]:Type(other:memory address:):constantValue(0:Type(u32::):0:False:0):the :ref:`memory address <syntax-memaddr>` :math:`F.\\AMODULE.\\MIMEMS[0]`))]",
            "ASSERT    : [ExistCondition(['exist', MemInstance(S.\\SMEMS[a]:Type(any::):ValRefValue(Type(u32::), a, 1)::math:`S.\\SMEMS[a]`)])]",
            "LET       : [(ValRefValue(Type(any::), \\X{mem}, 1), MemInstance(S.\\SMEMS[a]:Type(other:memory instance:):ValRefValue(Type(u32::), a, 1):the :ref:`memory instance <syntax-meminst>` :math:`S.\\SMEMS[a]`))]",
            "LET       : [(ValRefValue(Type(any::), \\X{sz}, 1), FormulaValue(Type(i32:length:), the length of :math:`\\X{mem}.\\MIDATA` divided by the :ref:`page size <page-size>`, 1))]",
            "PUSH      : [ValRefValue(Type(i32::), \\X{sz}, 1)]"
        ],
        "vstack_vt_num_seq": "[[(Type(i32::), 1), 1]]"
    },
    "valid_data": {
        "raw_title": ":math:`\\MEMORYSIZE`",
        "name": "memory.size",
        "ctgy": "Memory",
        "steps": [
            "MUST_EXIST: [ExistCondition(['valid_define_condition', MemAddrInstance(C.\\CMEMS[0]:Type(any::):constantValue(0:Type(u32::):0:False:0)::math:`C.\\CMEMS[0]`)])]",
            "MUST_TY   : [directValidTypeCond(['inst_ty_direct_cond', [], [StackValue(Type(i32::), any, 1)]])]"
        ]
    },
    "imms": {},
    "exec_title_paras": {},
    "binary_info": [
        "<3F: hex>",
        "<00: hex>"
    ]
}