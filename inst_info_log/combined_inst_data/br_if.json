{
    "exec_data": {
        "ctgy": "Control",
        "raw_title": ":math:`\\BRIF~l`",
        "name": "br_if",
        "steps_part": "1. Assert: due to :ref:`validation <valid-br_if>`, a value of :ref:`value type <syntax-valtype>` |I32| is on the top of the stack.\n2. Pop the value :math:`\\I32.\\CONST~c` from the stack.\n3. If :math:`c` is non-zero, then:\n   a. :ref:`Execute <exec-br>` the instruction :math:`(\\BR~l)`.\n4. Else:\n   a. Do nothing.",
        "steps": [
            "ASSERT    : [StackCondition(['stack_top', True, StackValue(Type(i32::), any, 1)])]",
            "POP       : [ValRefValue(Type(i32::), c, 1)]",
            "IF        : [[NonZeroCondition(['non_zero_condition', ValRefValue(Type(any::), c, 1)])]]",
            "  EXECUTE   : [FormulaValue(Type(any::), \\BR~l, 1)]",
            "ELSE      : []",
            "  DO_NOTHING: []"
        ],
        "vstack_vt_num_seq": "[[(Type(i32::), 1), -1]]"
    },
    "valid_data": {
        "raw_title": ":math:`\\BRIF~l`",
        "name": "br_if",
        "ctgy": "Control",
        "steps": [
            "MUST_EXIST: [ExistCondition(['valid_define_condition', LabelAddrInstance(C.\\CLABELS[l]:Type(any::):ValRefValue(Type(u32::), l, 1)::math:`C.\\CLABELS[l]`)])]",
            "LET       : [(ValRefValue(Type(any::), [t^\\ast], 1), LabelAddrInstance(C.\\CLABELS[l]:Type(other:result type:):ValRefValue(Type(u32::), l, 1):the :ref:`result type <syntax-resulttype>` :math:`C.\\CLABELS[l]`))]",
            "MUST_TY   : [directValidTypeCond(['inst_ty_direct_cond', [StackValue(Type(any::t^\\ast), any, 1), StackValue(Type(i32::), any, 1)], [StackValue(Type(any::t^\\ast), any, 1)]])]"
        ]
    },
    "imms": {
        "l": "<l: labelidx>"
    },
    "exec_title_paras": {},
    "binary_info": [
        "<0D: hex>",
        "<l: labelidx>"
    ]
}