{
    "exec_data": {
        "ctgy": "Memory",
        "raw_title": ":math:`\\V128\\K{.}\\LOAD{N}\\K{\\_splat}~\\memarg`",
        "name": "v128.loadN_splat",
        "steps_part": "1. Let :math:`F` be the :ref:`current <exec-notation-textual>` :ref:`frame <syntax-frame>`.\n2. Assert: due to :ref:`validation <valid-load-extend>`, :math:`F.\\AMODULE.\\MIMEMS[0]` exists.\n3. Let :math:`a` be the :ref:`memory address <syntax-memaddr>` :math:`F.\\AMODULE.\\MIMEMS[0]`.\n4. Assert: due to :ref:`validation <valid-load-extend>`, :math:`S.\\SMEMS[a]` exists.\n5. Let :math:`\\X{mem}` be the :ref:`memory instance <syntax-meminst>` :math:`S.\\SMEMS[a]`.\n6. Assert: due to :ref:`validation <valid-load-extend>`, a value of :ref:`value type <syntax-valtype>` |I32| is on the top of the stack.\n7. Pop the value :math:`\\I32.\\CONST~i` from the stack.\n8. Let :math:`\\X{ea}` be the integer :math:`i + \\memarg.\\OFFSET`.\n9. If :math:`\\X{ea} + N/8` is larger than the length of :math:`\\X{mem}.\\MIDATA`, then:\n    a. Trap.\n10. Let :math:`b^\\ast` be the byte sequence :math:`\\X{mem}.\\MIDATA[\\X{ea} \\slice N/8]`.\n11. Let :math:`n` be the integer for which :math:`\\bytes_{\\iN}(n) = b^\\ast`.\n12. Let :math:`L` be the integer :math:`128 / N`.\n13. Let :math:`c` be the result of computing :math:`\\lanes^{-1}_{\\iN\\K{x}L}(n^L)`.\n14. Push the value :math:`\\V128.\\CONST~c` to the stack.",
        "steps": [
            "LET       : [(ValRefValue(Type(any::), F, 1), FrameInstance(Type(other:frame:), current frame, 1))]",
            "ASSERT    : [ExistCondition(['exist', MemAddrInstance(F.\\AMODULE.\\MIMEMS[0]:Type(any::):constantValue(0:Type(u32::):0:False:0)::math:`F.\\AMODULE.\\MIMEMS[0]`)])]",
            "LET       : [(ValRefValue(Type(any::), a, 1), MemAddrInstance(F.\\AMODULE.\\MIMEMS[0]:Type(other:memory address:):constantValue(0:Type(u32::):0:False:0):the :ref:`memory address <syntax-memaddr>` :math:`F.\\AMODULE.\\MIMEMS[0]`))]",
            "ASSERT    : [ExistCondition(['exist', MemInstance(S.\\SMEMS[a]:Type(any::):ValRefValue(Type(u32::), a, 1)::math:`S.\\SMEMS[a]`)])]",
            "LET       : [(ValRefValue(Type(any::), \\X{mem}, 1), MemInstance(S.\\SMEMS[a]:Type(other:memory instance:):ValRefValue(Type(u32::), a, 1):the :ref:`memory instance <syntax-meminst>` :math:`S.\\SMEMS[a]`))]",
            "ASSERT    : [StackCondition(['stack_top', True, StackValue(Type(i32::), any, 1)])]",
            "POP       : [ValRefValue(Type(i32::), i, 1)]",
            "LET       : [(ValRefValue(Type(any::), \\X{ea}, 1), FormulaValue(Type(i32::), i + \\memarg.\\OFFSET, 1))]",
            "IF        : [[CompareCondition(['compare_condition', FormulaValue(Type(any::), \\X{ea} + N/8, 1), True, 'larger', LengthRefValue(the length of :math:`\\X{mem}.\\MIDATA`:Type(u32::):\\X{mem}:\\MIDATA:the length of :math:`\\X{mem}.\\MIDATA`)])]]",
            "  TRAP      : []",
            "LET       : [(ValRefValue(Type(any::), b^\\ast, 1), FormulaValue(Type(other:byte sequence:), \\X{mem}.\\MIDATA[\\X{ea} \\slice N/8], 1))]",
            "LET       : [(ValRefValue(Type(any::), n, 1), FormulaValue(Type(i32:for which:), \\bytes_{\\iN}(n) = b^\\ast, 1))]",
            "LET       : [(ValRefValue(Type(any::), L, 1), FormulaValue(Type(i32::), 128 / N, 1))]",
            "LET       : [(ValRefValue(Type(any::), c, 1), FormulaValue(Type(other:byte_seq:), \\lanes^{-1}_{\\iN\\K{x}L}(n^L), 1))]",
            "PUSH      : [ValRefValue(Type(v128::), c, 1)]"
        ],
        "vstack_vt_num_seq": "[[(Type(i32::), 1), -1], [(Type(v128::), 1), 1]]"
    },
    "valid_data": {
        "raw_title": ":math:`\\K{v128.}\\LOAD{N}\\K{\\_splat}~\\memarg`",
        "name": "v128.loadN_splat",
        "ctgy": "Memory",
        "steps": [
            "MUST_EXIST: [ExistCondition(['valid_define_condition', MemAddrInstance(C.\\CMEMS[0]:Type(any::):constantValue(0:Type(u32::):0:False:0)::math:`C.\\CMEMS[0]`)])]",
            "MUST_BE   : [validCompareCond(['compare_condition', FormulaValue(Type(any::), 2^{\\memarg.\\ALIGN}, 1), FormulaValue(Type(any::), N/8, 1), False, 'larger than'])]",
            "MUST_TY   : [directValidTypeCond(['inst_ty_direct_cond', [StackValue(Type(i32::), any, 1)], [StackValue(Type(v128::), any, 1)]])]"
        ]
    },
    "imms": {
        "\\X{memarg}.\\K{align}": "<\\X{memarg}.\\K{align}: memarg_align>",
        "\\X{memarg}.\\K{offset}": "<\\X{memarg}.\\K{offset}: memarg_offset>"
    },
    "exec_title_paras": {
        "N": "16"
    },
    "binary_info": [
        "<FD: hex>",
        "<8: u32>",
        "<\\X{memarg}.\\K{align}: memarg_align>",
        "<\\X{memarg}.\\K{offset}: memarg_offset>"
    ]
}