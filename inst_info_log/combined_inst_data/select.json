{
    "exec_data": {
        "ctgy": "Parametric",
        "raw_title": ":math:`\\SELECT~(t^\\ast)^?`",
        "name": "select",
        "steps_part": "1. Assert: due to :ref:`validation <valid-select>`, a value of :ref:`value type <syntax-valtype>` |I32| is on the top of the stack.\n2. Pop the value :math:`\\I32.\\CONST~c` from the stack.\n3. Assert: due to :ref:`validation <valid-select>`, two more values (of the same :ref:`value type <syntax-valtype>`) are on the top of the stack.\n4. Pop the value :math:`\\val_2` from the stack.\n5. Pop the value :math:`\\val_1` from the stack.\n6. If :math:`c` is not :math:`0`, then:\n   a. Push the value :math:`\\val_1` back to the stack.\n7. Else:\n   a. Push the value :math:`\\val_2` back to the stack.",
        "steps": [
            "ASSERT    : [StackCondition(['stack_top', True, StackValue(Type(i32::), any, 1)])]",
            "POP       : [ValRefValue(Type(i32::), c, 1)]",
            "ASSERT    : [StackTopSameTypeCondition(['two_same_type_on_stack', True, StackValue(Type(any::), any, 2)])]",
            "POP       : [ValRefValue(Type(any::), \\val_2, 1)]",
            "POP       : [ValRefValue(Type(any::), \\val_1, 1)]",
            "IF        : [[IsCondition(['is_condition', ValRefValue(Type(any::), c, 1), False, constantValue(0:Type(any::):0:False::math:`0`)])]]",
            "  PUSH      : [ValRefValue(Type(any::), \\val_1, 1)]",
            "ELSE      : []",
            "  PUSH      : [ValRefValue(Type(any::), \\val_2, 1)]"
        ],
        "vstack_vt_num_seq": "[[(Type(i32::), 1), -1], [(Type(any::), 1), -1], [(Type(any::), 1), -1], [(Type(any::), 1), 1]]"
    },
    "valid_data": {
        "raw_title": ":math:`\\SELECT~(t^\\ast)^?`",
        "name": "select",
        "ctgy": "Parametric",
        "steps": [
            "IF        : [[immPresentCondition(['present_condition', ValRefValue(Type(any::), t^\\ast, 1)])]]",
            "  MUST_BE   : [validIsCondition(['valid_must_be_condition', FormulaValue(Type(i32:length:), The length of :math:`t^\\ast`, 1), constantValue(1:Type(any::):1:False::math:`1`)])]",
            "  MUST_TY   : [directValidTypeCond(['inst_ty_direct_cond', [StackValue(Type(any::t^\\ast), any, 1), StackValue(Type(any::t^\\ast), any, 1), StackValue(Type(i32::), any, 1)], [StackValue(Type(any::t^\\ast), any, 1)]])]",
            "ELSE      : []",
            "  MUST_TY   : [inferedValidTypeCond(['inst_ty_infered_cond', [StackValue(Type(any::t), any, 1), StackValue(Type(any::t), any, 1), StackValue(Type(i32::), any, 1)], [StackValue(Type(any::t), any, 1)], False, 'operand type', ['t']])]"
        ]
    },
    "imms": {},
    "exec_title_paras": {},
    "binary_info": [
        "<1B: hex>"
    ]
}